name: Check for Claude Desktop Updates

on:
  schedule:
    # Check daily at 12:00 UTC (good citizen timing)
    - cron: '0 12 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  check-updates:
    name: Check for Upstream Updates
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      version_info: ${{ steps.check.outputs.version_info }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: Check for Updates
        id: check
        run: |
          echo "Running version check..."
          if python3 scripts/check-upstream-version.py; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            exit_code=$?
            if [ $exit_code -eq 1 ]; then
              echo "Changes detected!"
              echo "has_changes=true" >> $GITHUB_OUTPUT
              
              # Get version info for outputs
              if [ -f ".claude-version-metadata" ]; then
                version_info=$(python3 -c "
          import json
          with open('.claude-version-metadata', 'r') as f:
              data = json.load(f)
              versions = []
              for arch, info in data['architectures'].items():
                  version = info.get('version', 'unknown')
                  versions.append(f'{arch}:{version}')
              print(','.join(versions))
          ")
                echo "version_info=$version_info" >> $GITHUB_OUTPUT
              fi
            else
              echo "Error occurred during version check (exit code: $exit_code)"
              exit $exit_code
            fi
          fi
      
      - name: Commit Updated Metadata
        if: steps.check.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .claude-version-metadata
          git commit -m "Update Claude Desktop version metadata
          
          Detected new upstream version(s): ${{ steps.check.outputs.version_info }}
          
          This commit updates the version tracking metadata file."
          git push

  trigger-build:
    name: Trigger Build
    needs: check-updates
    if: needs.check-updates.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    outputs:
      workflow_run_id: ${{ steps.trigger.outputs.workflow_run_id }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we have the latest commit with metadata
      
      - name: Trigger Build Workflow
        id: trigger
        uses: actions/github-script@v7
        with:
          script: |
            const result = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              ref: 'main'
            });
            
            console.log('Build workflow triggered successfully');
            console.log('Version info:', '${{ needs.check-updates.outputs.version_info }}');
            
            // Wait a moment for the workflow to start, then get the run ID
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              event: 'workflow_dispatch',
              status: 'in_progress',
              per_page: 1
            });
            
            if (runs.data.workflow_runs && runs.data.workflow_runs.length > 0) {
              const runId = runs.data.workflow_runs[0].id;
              console.log('Found workflow run ID:', runId);
              core.setOutput('workflow_run_id', runId);
            }
      
      - name: Create Issue for New Version
        uses: actions/github-script@v7
        with:
          script: |
            const versionInfo = '${{ needs.check-updates.outputs.version_info }}';
            const versions = versionInfo.split(',').map(v => {
              const [arch, version] = v.split(':');
              return `- ${arch}: ${version}`;
            }).join('\n');
            
            const issueBody = `üéâ **New Claude Desktop Version Detected!**
            
            The automated version checker has detected a new upstream release:
            
            ${versions}
            
            **Actions Taken:**
            - ‚úÖ Version metadata updated
            - ‚úÖ Build workflow triggered automatically
            - ‚è≥ Packages are being built
            - üöÄ Release will be created automatically if builds succeed
            
            **Links:**
            - [Build Workflow Run](${context.payload.repository.html_url}/actions)
            - [Claude Desktop Official](https://claude.ai/download)
            
            *This issue was created automatically by the upstream version checker.*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `New Claude Desktop Version Available: ${versionInfo}`,
              body: issueBody,
              labels: ['enhancement', 'automated', 'new-version']
            });

  wait-and-release:
    name: Wait for Build and Create Release
    needs: [check-updates, trigger-build]
    if: needs.check-updates.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for CI Build to Complete
        uses: actions/github-script@v7
        with:
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 minutes
            const checkInterval = 30 * 1000;    // 30 seconds
            const startTime = Date.now();
            
            console.log('Waiting for CI build to complete...');
            
            while (Date.now() - startTime < maxWaitTime) {
              // Get the most recent workflow_dispatch run of ci.yml
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'ci.yml',
                event: 'workflow_dispatch',
                per_page: 1
              });
              
              if (runs.data.workflow_runs && runs.data.workflow_runs.length > 0) {
                const run = runs.data.workflow_runs[0];
                console.log(`Build status: ${run.status} - ${run.conclusion}`);
                
                if (run.status === 'completed') {
                  if (run.conclusion === 'success') {
                    console.log('‚úÖ Build completed successfully!');
                    return;
                  } else {
                    console.log(`‚ùå Build failed with conclusion: ${run.conclusion}`);
                    core.setFailed(`CI build failed: ${run.conclusion}`);
                    return;
                  }
                }
              }
              
              console.log('Build still in progress, waiting...');
              await new Promise(resolve => setTimeout(resolve, checkInterval));
            }
            
            console.log('‚ùå Timeout waiting for build to complete');
            core.setFailed('Timeout waiting for CI build to complete');
      
      - name: Download Build Artifacts
        run: |
          echo "üì• Downloading build artifacts from completed CI run..."
          
          # Get the most recent successful workflow_dispatch CI run
          RUN_ID=$(gh run list --workflow=ci.yml --event=workflow_dispatch --status=success --limit=1 --json databaseId --jq '.[0].databaseId')
          
          if [ -z "$RUN_ID" ] || [ "$RUN_ID" = "null" ]; then
            echo "‚ùå No successful CI workflow run found"
            exit 1
          fi
          
          echo "Found successful CI run: $RUN_ID"
          
          # Create artifacts directory
          mkdir -p release-artifacts
          
          # Download all artifacts from the CI run
          echo "Downloading artifacts..."
          gh run download "$RUN_ID" --dir release-artifacts/
          
          # List what we downloaded
          echo "Downloaded artifacts:"
          find release-artifacts/ -type f -name "*.deb" -o -name "*.AppImage" | sort
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        run: |
          # Get version info from metadata
          version_info=$(python3 -c "
          import json
          with open('.claude-version-metadata', 'r') as f:
              data = json.load(f)
              version = data['architectures']['amd64'].get('version', 'unknown')
              print(version)
          ")
          
          # Create tag name
          tag_name="v1.0.0+claude${version_info}"
          echo "Creating release: $tag_name"
          
          # Create release notes
          cat > release_notes.md << EOF
          üöÄ **Automated Release for Claude Desktop v${version_info}**
          
          This release contains Linux packages for Claude Desktop version ${version_info}.
          
          **Packages Included:**
          - üì¶ Debian packages (.deb) for amd64 and arm64
          - üì± AppImage files for amd64 and arm64
          
          **Installation:**
          - **Debian/Ubuntu**: Download the .deb file and install with \`sudo apt install ./claude-desktop_${version_info}_<arch>.deb\`
          - **Universal Linux**: Download the AppImage file, make it executable, and run directly
          
          **Features:**
          - ‚úÖ Full Claude Desktop functionality
          - ‚å®Ô∏è Global hotkey support (Ctrl+Alt+Space)
          - üîî System tray integration  
          - üîß MCP (Model Context Protocol) support
          - üñ•Ô∏è Native Linux desktop integration
          
          Built automatically when new upstream version was detected.
          
          ---
          *This is an unofficial build. Report issues at: https://github.com/${{ github.repository }}/issues*
          EOF
          
          # Create the release with all package files
          echo "Creating GitHub release..."
          gh release create "$tag_name" \
            --title "Claude Desktop Linux v${version_info}" \
            --notes-file release_notes.md \
            release-artifacts/*/*.deb \
            release-artifacts/*/*.AppImage
          
          echo "‚úÖ Release $tag_name created successfully!"
          echo "üîó View at: https://github.com/${{ github.repository }}/releases/tag/$tag_name"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 